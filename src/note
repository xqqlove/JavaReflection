Java Reflection(反射)是被视为动态语言的关键，反射机制允许程序在执行期间借助于Reflection API 取得任何类的内部信息，并能直接操作任意对象的内部属性和方法
Java反射机制提供的功能
   在运行时判断任意一个对象所述的类
   在运行时构造人任意一个类的对象
   运行时判断任意一个类所具有的成员变量和方法
   运行时调用成员变量和方法
   生成动态代理




   --理解Class类并实例化Class类对象
   --运行时创建类对象 并获得类的完整结构
   --通过反射调用类的指定方法，指定属性
   --动态代理



   反射相关API
   --java.lang.Class代表一个类
   --java.lang.reflect.Method:代表类的方法
   --java.lang.reflect.Field:代表类的成员变量
   --java.lang.reflect.Constructor:代表类的构造方法

 Class类

 --Class本身是一个类
 --Class对象只能由系统建立对象
 --一个类在jvm中只有一个Class实例
 --一个Class对象对应的是一个加载到jvm中的一个.class文件
 --每个类的实例都会记住自己是由那个Class实例所生成
 --通过Class可以完整的得到一个类中的完整结构

ClassLoader

Class 对象能做什么？
   --1创建类对象，调用Class对象的newInstance()方法
     要求：必须有无参构造器
       构造器的访问权限需要足够

    --

通过反射调用类中指定的方法和属性
   通过Method类调用类中的方法
   1.通过Class类的getMethod（）获取method对象
   使用Object invoke()调用

Java动态代理
   静态代理的特征是代理类和目标对象的类都是在编译期确定下来的，不利于程序的扩展，并且每一个代理类只能为一个接口服务，这样程序开发中必然产生过多的代理
   最好可以通过一个代理类完成全部的代理功能

   动态代理是指客户通过代理类来调用其他对象的方法，并且实在程序运行时根据需要动态创建目标类的代理对象

   代理设计模式的原理
      --使用一个代理将对象包装起来，然后用该代理对象取代原始对象，任何对原始对象的调用都要通过代理，代理对象决定是否以及何时讲方法调用转到院士对象上



